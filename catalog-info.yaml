apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: demo-service
  description: Demo Service
  tags:
    - java
    - data
  links:
    - url: https://example.com/user
      title: Examples Users
      icon: user
    - url: https://example.com/group
      title: Example Group
      icon: group
    - url: https://example.com/cloud
      title: Link with Cloud Icon
      icon: cloud
    - url: https://example.com/dashboard
      title: Dashboard
      icon: dashboard
    - url: https://example.com/help
      title: Support
      icon: help
    - url: https://example.com/web
      title: Website
      icon: web
    - url: https://example.com/alert
      title: Alerts
      icon: alert
spec:
  type: service
  lifecycle: experimental
  owner: platform-team
  system: artist-engagement-portal

---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: environment-creator
  title: Create a New Environment
  description: Create a new environment from a template
  tags:
    - simplenodeservice
spec:
  owner: platform-team
  type: service
  parameters:
    - title: Environment Template Info
      required:
        - envTemplateName
      properties:
        envTemplateName:
          title: Environment Template Name
          type: string
          enum:
            - 'default'
            - 'aws'
            - 'gcp'
          default: 'default'
    - title: Your Team's Details
      required:
        - teamIdentifier
        - teamFullName
        - teamEmail
      properties:
        teamIdentifier:
          title: Team identifier
          description: Your unique internal team identifier (eg. team01)
          type: string
          pattern: '^team\d+$' # must match `team` + 1 or more digit. eg. `team1`, `team123`, `team9843` all valid. `team` invalid.
          ui:placeholder: 'teamIdentifier'
          default: 'team01'
        teamFullName:
          title: Full name of the team 
          description: Your real team name (eg. Team Best App Ever)
          type: string
          ui:placeholder: 'teamFullName'
          default: "Team 01"
        teamEmail:
          title: Team Email
          description: Dummy email to reach your team (eg. team01@example.com)
          type: string
          ui:placeholder: 'teamEmail'
          default: "team01@example.com"
    - title: Environment Details
      required:
        - certManagerEnabled
        - externalDNSEnabled
        - kyvernoEnabled
        - kubePrometheusEnabled
      properties:
        externalDNSEnabled:
          title: "External DNS"
          description: "Enable external DNS"
          type: boolean
          default: false
        kyvernoEnabled:
          title: "Kyverno"
          description: "Enable Kyverno"
          type: boolean
          default: false  
        certManagerEnabled:
          title: "Cert Manager"
          description: "Enable Cert-Manager"
          type: boolean
          default: false        
        kubePrometheusEnabled:
          title: "Kube Prometheus Stack"
          description: "Enable Kube-Prometheus Stack"
          type: boolean
          default: false      
      dependencies:
        externalDNSProvider:
          oneOf:
            - properties:
                externalDNSEnabled:
                  boolean: true
                java version:
                  type: "string"
                  enum:
                    - digitalocean
                    - aws
                    - gcp
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: "envtemplates/${{ parameters.envTemplateName }}-content"
        targetPath: "customer-envs/${{ parameters.envTemplateName }}-${{ parameters.teamIdentifier}}-${{ parameters.releaseStage }}"
        values:
         envTemplateName: ${{ parameters.envTemplateName }}
         teamIdentifier: ${{ parameters.teamIdentifier }}
         teamFullName: ${{ parameters.teamFullName }}
         teamEmail: ${{ parameters.teamEmail }}
         certManagerEnabled: ${{ parameters.certManagerEnabled }}
         externalDNSEnabled: ${{ parameters.externalDNSEnabled }}
         kyvernoEnabled: ${{ parameters.kyvernoEnabled }}
         kubePrometheusEnabled: ${{ parameters.kubePrometheusEnabled }}
    - id: delete-cert-manager
      name: Delete cert-manager
      if: ${{ parameters.certManagerEnabled === false }}
      action: fs:delete
      input:
        files:
          - "./${{ parameters.envTemplateName }}-content/argoapp/cert-manager.yaml"
    - id: delete-external-dns
      name: Delete external-dns
      if: ${{ parameters.externalDNSEnabled === false }}
      action: fs:delete
      input:
        files:
          - "./${{ parameters.envTemplateName }}-content/argoapp/external-dns.yaml"

    - id: delete-kyverno
      name: Delete kyverno
      if: ${{ parameters.kyvernoEnabled === false }}
      action: fs:delete
      input:
        files:
          - "./${{ parameters.envTemplateName }}-content/argoapp/kyverno.yaml"
          
    - id: delete-kube-prom-stack
      name: Delete Kube-Prometheus-Stack
      if: ${{ parameters.kubePrometheusEnabled === false }}
      action: fs:delete
      input:
        files:
          - "./${{ parameters.envTemplateName }}-content/argoapp/kube-prom-stack.yaml"
    - id: publish
      action: publish:github:pull-request
      name: Create Pull Request
      input:
        repoUrl: "github.com?repo=GITHUB_REPO_NAME_PLACEHOLDER&owner=GITHUB_ORG_NAME_PLACEHOLDER"
        branchName: ${{ parameters.projectName }}-${{ parameters.teamIdentifier}}-${{ parameters.releaseStage }}
        targetBranchName: "main"
        title: "New App Onboarding: ${{ parameters.projectName }}-${{ parameters.teamIdentifier}}-${{ parameters.releaseStage }}"
        description: "A new application is coming! ${{ parameters.projectName }} from ${{ parameters.teamIdentifier}} in ${{ parameters.releaseStage }} is ready for review."
        update: true
    - id: catalog
      name: Register to Catalog
      action: catalog:register
      input:
        catalogInfoUrl: GITHUB_DOT_COM_REPO_PLACEHOLDER/blob/main/customer-apps/${{ parameters.projectName }}-${{ parameters.teamIdentifier }}-${{ parameters.releaseStage }}/backstage-templates/catalog-info.yaml
        optional: true
  output:
    links:
      - title: View on Github
        url: ${{ steps.publish.output.remoteUrl }}
      - title: View in Catalog
        icon: catalog
        entityRef: ${{ steps.catalog.output.entityRef }}
      - title: View in ArgoCD
        icon: catalog
        url: https://CODESPACE_NAME_PLACEHOLDER-ARGOCD_PORT_NUMBER_PLACEHOLDER.GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN_PLACEHOLDER/applications/argocd/${{ parameters.projectName }}-${{ parameters.teamIdentifier }}-${{ parameters.releaseStage }}
      - title: View in Dynatrace
        icon: catalog
        url: DT_TENANT_APPS_PLACEHOLDER
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: gather-feedback
  title: Platform Feedback Form
  description: Imagine you need to collect feedback from your users. Don't make them email you, a web form is much nicer!
  tags:
    - platform
    - feedback
  links:
    - url: https://www.example.com/platformteam
      title: Platform Improvement Process
      icon: docs
spec:
  owner: infrastructure
  type: platform
  parameters:
    - title: Feedback Form
      properties:
        feedbackType:
          title: Feedback Type
          type: string
          description: Which project would you like to deploy?
          enum:
            - 'improvement'
            - 'feature'
            - 'bug'
            - 'praise'
          enumNames:
            - 'An existing platform feature could be improved...'
            - 'The platform needs to do...'
            - 'Help! Something is broken!'
            - 'The platform is great. Just saying thanks!'
          default: 'improvement'
        userIdentifier:
          title: Your Name (optional)
          description: (optional) Your name
          type: string
          ui:placeholder: 'yourName'
          default: 'testing'
        feedback:
          title: "Leave your feedback below"
          type: string
          ui:widget: textarea
          ui:options:
            rows: 10
          default: "Talk to us..."
        keepMeInformed:
          title: "Stay informed of progress on this item?"
          description: "Tick this box if you want email updates on this item to be sent from the platform team."
          type: boolean
          default: true
  steps:
    - id: send-event
      name: Submit Feedback
      action: http:backstage:request
      input:
        method: "POST"
        # This proxy is set in app-config.production.yaml
        # It should actually point to the bizevent ingest
        # But I don't know how to use backstage + oAuth
        # Q in #backstage: https://cloud-native.slack.com/archives/C01B5HYR2R3/p1701406188130209
        path: "/proxy/dteventingest"
        headers:
          Content-Type: "application/json; charset=utf-8"
        body: |
          {
            "eventType": "CUSTOM_INFO",
            "properties": {
              "type": "${{ parameters.feedbackType }}",
              "user": "${{ parameters.userIdentifier }}",
              "feedback": "${{ parameters.feedback }}",
              "stay-informed": "${{ parameters.keepMeInformed }}",
              "source": "backstage",
              "template": "platform-feedback"
            },
            "timeout": 1,
            "title": "ℹ️ Platform Feedback ℹ️"
          }
